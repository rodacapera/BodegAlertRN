import CustomBanner from '@src/components/customBanner/CustomBanner';
import CustomDialogAlert from '@src/components/customDialogAlert/CustomDialogAlert';
import CustomIcon from '@src/components/customIcon/CustomIcon';
import CustomInputForm from '@src/components/customInputForm/CustomInputForm';
import {lightTheme} from '@src/hooks/lightMode';
import {actualTheme} from '@src/types/contextTypes';
import {RegisterType} from '@src/types/globalTypes';
import {DataKey} from '@src/types/userTypes';
import {Fragment, useRef, useState} from 'react';
import {useTranslation} from 'react-i18next';
import {
  Dimensions,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  View
} from 'react-native';
import {Button, TextInput, Text} from 'react-native-paper';
import {registerStyles} from '../styles/registerStyles';
import {adminFormHook} from './hooks/adminFormHook';
import CustomLoadingOverlay from '@src/components/customLoadingOverlay/CustomLoadingOverlay';
import ErrorInputForm from '@src/components/customErrorInputForm/CustomErrorInputForm';
import {TouchableOpacity} from 'react-native-gesture-handler';

const AdminForm = ({type}: {type: RegisterType}) => {
  const phoneRef = useRef<any>();
  const {colors, theme, dark} = actualTheme();
  const {t} = useTranslation();
  const [activeTab, setActiveTab] = useState(2);
  const windowWidth = Dimensions.get('window').width;
  const {
    myCurrentLocation,
    setCurrentButtonAction,
    generateGroupCode,
    searchGroup,
    alertGroupFound,
    setAlertGroupFound,
    onChangeInput,
    groupFound,
    submitForm,
    user,
    alertUserExist,
    setAlertUserExist,
    setCodeAutogenerated,
    codeAutogenerated,
    isLoadingForm,
    countryCode,
    errorRegister,
    setErrorRegister,
    errorPhone,
    value,
    isNotValidEmail,
    isNotSubmit,
    setIsNotSubmit,
    emailValidate
  } = adminFormHook(type, phoneRef);

  console.log('activeTab', activeTab);

  return isLoadingForm ? (
    <CustomLoadingOverlay visible={isLoadingForm} />
  ) : countryCode && (countryCode != undefined || countryCode != '') ? (
    <View>
      <CustomBanner
        visible={true}
        text={`${t('registerView.banner')} ${t('drawer.users')}!`}
        icon="account-group"
      />
      <CustomDialogAlert
        visible={alertUserExist}
        setVisible={setAlertUserExist}
        title={t('registerView.errorUserRegisterTitle')}
        description={t('registerView.errorUserRegisterDescription')}
      />
      <CustomDialogAlert
        visible={!isNotSubmit && alertGroupFound}
        setVisible={setAlertGroupFound}
        title={t('adminFormView.alertGroupFoundTitle')}
        description={t('adminFormView.alertGroupFoundDescription')}
        actionSuccess={setIsNotSubmit}
      />
      <CustomDialogAlert
        visible={errorRegister}
        setVisible={setErrorRegister}
        title={t('registerView.errorRegisterTitle')}
        description={t('registerView.errorRegisterDescription')}
      />
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={{flex: 1}}>
        <View style={registerStyles.tabContainer}>
          <TouchableOpacity
            style={[
              activeTab === 2
                ? [
                    registerStyles.activeButton,
                    {
                      borderBottomColor: dark
                        ? colors.surface
                        : colors.onPrimaryContainer,
                      backgroundColor: dark
                        ? colors.inversePrimary
                        : colors.primaryContainer,
                      shadowColor: colors.elevation.level3
                    }
                  ]
                : [registerStyles.inactiveButton],
              {width: (windowWidth / 2) * 0.96}
            ]}
            onPress={() => setActiveTab(2)}>
            <Text>{t('adminFormView.newGroup')}</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[
              activeTab === 3
                ? [
                    registerStyles.activeButton,
                    {
                      borderBottomColor: dark
                        ? colors.surface
                        : colors.onPrimaryContainer,
                      backgroundColor: dark
                        ? colors.inversePrimary
                        : colors.primaryContainer,
                      shadowColor: colors.elevation.level3
                    }
                  ]
                : [registerStyles.inactiveButton],
              {width: (windowWidth / 2) * 0.96}
            ]}
            onPress={() => setActiveTab(3)}>
            <Text>{t('adminFormView.existentGroup')}</Text>
          </TouchableOpacity>
        </View>
        <ScrollView
          style={registerStyles.body}
          showsVerticalScrollIndicator={false}>
          {type === 'residence' && (
            <Fragment>
              <Text style={{marginTop: 10}}>Your group data:</Text>
              <TextInput
                label={t('adminFormView.group')}
                style={registerStyles.input}
                theme={theme}
                keyboardType="numeric"
                placeholderTextColor={lightTheme.colors.outlineVariant}
                placeholder="XXXXXX89"
                value={user?.group_number ?? ''}
                onChangeText={text =>
                  onChangeInput(text as never, 'group_number' as DataKey)
                }
                disabled={activeTab == 2 ? true : false}
                onBlur={() => {
                  if (activeTab == 3) {
                    setIsNotSubmit(true);
                    !codeAutogenerated &&
                      user?.group_number != '' &&
                      searchGroup();
                    setCodeAutogenerated(false);
                  }
                }}
                left={
                  <TextInput.Icon
                    icon={() => (
                      <CustomIcon
                        name={'sitemap'}
                        color={colors.onSurface}
                        font={'awesome'}
                        size={28}
                      />
                    )}
                  />
                }
                right={
                  activeTab == 2 && (
                    <TextInput.Icon
                      icon={() => (
                        <CustomIcon
                          name={'refresh'}
                          color={colors.onPrimaryContainer}
                          font={'awesome'}
                        />
                      )}
                      onPress={generateGroupCode}
                    />
                  )
                }
              />
              {activeTab == 3 && alertGroupFound && (
                <ErrorInputForm
                  error={t('adminFormView.alertGroupFoundTitle')}
                  marginTop={0}
                />
              )}
              <TextInput
                label={t('adminFormView.groupAlias')}
                style={registerStyles.input}
                theme={theme}
                placeholderTextColor={lightTheme.colors.outlineVariant}
                placeholder={t('adminFormView.placeHolderAliasGroup')}
                value={user?.group_name ?? ''}
                editable={groupFound ? false : true}
                onChangeText={text =>
                  onChangeInput(text as never, 'group_name' as DataKey)
                }
                disabled={activeTab == 3 ? true : false}
                left={
                  <TextInput.Icon
                    icon={() => (
                      <CustomIcon
                        name={'building-o'}
                        color={colors.onSurface}
                        font={'awesome'}
                        size={28}
                      />
                    )}
                  />
                }
              />
            </Fragment>
          )}
          <View style={{marginVertical: 15}}>
            <CustomInputForm
              phoneRef={phoneRef}
              setButtonAction={setCurrentButtonAction}
              type="phone"
              value={value ?? undefined}
              code={countryCode}
              isDisabled
              isRegister
            />
          </View>
          {errorPhone && (
            <View style={{paddingTop: 40}}>
              <ErrorInputForm error={t('loginView.errorPhone')} />
            </View>
          )}
          <Text style={{marginTop: 10}}>Your personal data:</Text>
          <TextInput
            label={t('adminFormView.names')}
            style={registerStyles.input}
            theme={theme}
            onChangeText={text =>
              onChangeInput(text as never, 'name' as DataKey)
            }
            value={user?.name ?? undefined}
            left={
              <TextInput.Icon
                icon={() => (
                  <CustomIcon
                    name={'pencil'}
                    color={colors.onSurface}
                    font={'awesome'}
                  />
                )}
              />
            }
          />
          <TextInput
            label={t('adminFormView.lastNames')}
            style={registerStyles.input}
            theme={theme}
            onChangeText={text =>
              onChangeInput(text as never, 'lastname' as DataKey)
            }
            value={user?.lastname ?? undefined}
            left={
              <TextInput.Icon
                icon={() => (
                  <CustomIcon
                    name={'pencil'}
                    color={colors.onSurface}
                    font={'awesome'}
                  />
                )}
              />
            }
          />
          <TextInput
            label={t('adminFormView.email')}
            style={registerStyles.input}
            theme={theme}
            inputMode="email"
            onBlur={() => emailValidate(user?.email!)}
            onChangeText={text =>
              onChangeInput(text as never, 'email' as DataKey)
            }
            value={user?.email ?? undefined}
            left={
              <TextInput.Icon
                icon={() => (
                  <CustomIcon
                    name={'envelope'}
                    color={colors.onSurface}
                    font={'awesome'}
                  />
                )}
              />
            }
          />
          {isNotValidEmail && (
            <View style={{paddingTop: 40}}>
              <ErrorInputForm error={t('loginView.errorEmail')} />
            </View>
          )}
          <TextInput
            label={t('adminFormView.aliasName')}
            style={registerStyles.input}
            theme={theme}
            placeholderTextColor={lightTheme.colors.outlineVariant}
            placeholder={t('adminFormView.aliasPlaceHolder')}
            onChangeText={text =>
              onChangeInput(text as never, 'alias' as DataKey)
            }
            value={user?.alias ?? undefined}
            left={
              <TextInput.Icon
                icon={() => (
                  <CustomIcon
                    name={'home'}
                    color={colors.onSurface}
                    font={'awesome'}
                    size={28}
                  />
                )}
              />
            }
          />
          <TextInput
            label={t('adminFormView.country')}
            style={registerStyles.input}
            theme={theme}
            editable={false}
            value={myCurrentLocation?.country.long_name}
            left={
              <TextInput.Icon
                icon={() => (
                  <CustomIcon
                    name={'map'}
                    color={colors.onSurface}
                    font={'awesome'}
                  />
                )}
              />
            }
          />
          <TextInput
            label={t('adminFormView.address')}
            style={registerStyles.input}
            theme={theme}
            editable={false}
            value={myCurrentLocation?.address}
            left={
              <TextInput.Icon
                icon={() => (
                  <CustomIcon
                    name={'map-marker'}
                    color={colors.onSurface}
                    font={'awesome'}
                    size={29}
                  />
                )}
              />
            }
          />
          <TextInput
            label={t('adminFormView.city')}
            style={registerStyles.input}
            theme={theme}
            editable={false}
            value={myCurrentLocation?.city.long_name}
            left={
              <TextInput.Icon
                icon={() => (
                  <CustomIcon
                    name={'city'}
                    color={colors.onSurface}
                    font={'materialMc'}
                    size={29}
                  />
                )}
              />
            }
          />
          <TextInput
            label={t('adminFormView.state')}
            style={registerStyles.input}
            theme={theme}
            editable={false}
            value={myCurrentLocation?.state.long_name}
            left={
              <TextInput.Icon
                icon={() => (
                  <CustomIcon
                    name={'flag'}
                    color={colors.onSurface}
                    font={'awesome'}
                  />
                )}
              />
            }
          />
          <View
            style={{
              marginTop: 30,
              marginBottom: Platform.OS == 'android' ? 120 : 70
            }}>
            <Button
              textColor="white"
              mode="contained"
              icon="check"
              buttonColor={
                theme.dark ? colors.primaryContainer : colors.onPrimaryContainer
              }
              onPress={submitForm}>
              {t('general.continue')}
            </Button>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </View>
  ) : (
    <CustomLoadingOverlay visible />
  );
};

export default AdminForm;
